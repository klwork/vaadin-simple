<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project [<!ENTITY common SYSTEM "common.xml">]>
<project name="vaadin-simple-project" basedir="." default="" xmlns:artifact="urn:maven-artifact-ant">
	<property name="mvnsettings" value="mvnSettings.xml" />
	<property environment="env" />
	<property name="project.home" value="${basedir}/.." />
	<property name="WebRoot" value="${project.home}/WebRoot" />
	<property name="WEB-INF/lib" value="${WebRoot}/WEB-INF/lib" />
	<property name="classes" value="${WebRoot}/WEB-INF/classes" />
	<property name="jar-sources" value="${basedir}/jar-sources" />
	<property name="jar-others" value="${basedir}/jar-others" />
	<property name="spec-lib" value="${basedir}/spec-lib" />
	<property name="third-lib" value="${basedir}/third-lib" />
	<!-- build -->
	<property name="build.debug" value="on" />
	<property name="build.dir" value="${project.home}/build" />
	<property name="build.war" location="${build.dir}/war" />
	<property name="deploy" location="${build.dir}/deploy" />
	<property name="build.classes" value="${build.dir}/classes" />
	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
		<classpath>
			<pathelement location="${basedir}/spec-lib/maven-ant-tasks-2.1.3.jar" />
		</classpath>
	</typedef>



	<artifact:pom file="../pom.xml" id="maven.project" />
	<artifact:dependencies pathId="classpath.build" filesetid="maven.fileset.build">  
	            <pom refid="maven.project" />  
	        </artifact:dependencies>  
	  
	        <artifact:dependencies pathId="classpath.runtime" filesetid="maven.fileset.runtime" usescope="runtime">  
	            <pom refid="maven.project"/>  
	        </artifact:dependencies>  
	          
	        <artifact:dependencies pathId="classpath.provided" filesetid="maven.fileset.provided" scopes="provided">  
	            <pom refid="maven.project" />  
	        </artifact:dependencies>    


		
	<path id="my.classpath">
		<pathelement location="${classes}" />
		<!--<fileset dir="${WEB-INF/lib}">
			<include name="**/*.jar" />
		</fileset>-->
		 <fileset refid="maven.fileset.provided" />
		 <fileset refid="maven.fileset.runtime" />
	</path>
	

	<target name="copyRuntimeJars" description="将所有运行时所需的Jar包都放到WEB-INF的lib下">
		<artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime" settingsfile="${mvnsettings}">
			<pom refid="maven.project" />
		</artifact:dependencies>

		<delete>
			<fileset dir="${WEB-INF/lib}" includes="*.jar" />
		</delete>


		<copy todir="${WEB-INF/lib}">
			<fileset refid="runtime.fileset" />
			<mapper type="flatten" />
		</copy>
		<!-- 将一些特殊的包，自己下载的放在此目录下-->
		<copy todir="${WEB-INF/lib}" preservelastmodified="true">
			<fileset dir="${third-lib}" />
			<mapper type="flatten" />
		</copy>
	</target>

	<target name="copyOtherJars" description="将除运行时所需的Jar包外都放到otherlibs下">
		<artifact:dependencies pathId="full.classpath" filesetId="full.fileset" sourcesfilesetid="full.sources.fileset" useScope="test" settingsfile="${mvnsettings}">
			<pom refid="maven.project" />
		</artifact:dependencies>
		<copy todir="${jar-sources}">
			<fileset refid="full.sources.fileset" />
			<mapper type="flatten" />
		</copy>
		<!--<copy todir="${jar-others}">
				<referenceFileset refid="full.fileset" excludeDir="${WEB-INF/lib}" />
				<mapper type="flatten" />
			</copy>-->
	</target>
	<path id="testTask.classpath">
		<fileset dir="${WEB-INF/lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<target name="SassCompile" description="SassCompile">
		<property name="param1" value="${WebRoot}/VAADIN/themes/social/styles.scss" />
		<property name="param2" value="${WebRoot}/VAADIN/themes/social/styles.css" />
		<java classname="com.vaadin.sass.SassCompiler">
			<arg value="${param1}" />
			<arg value="${param2}" />
			<classpath>
				<path refid="testTask.classpath" />
			</classpath>
		</java>
	</target>
	
	<target name="SassCompile2" description="SassCompile">
		<property name="param1" value="${WebRoot}/VAADIN/themes/dashboard/styles.scss" />
		<property name="param2" value="${WebRoot}/VAADIN/themes/dashboard/styles.css" />
		<java classname="com.vaadin.sass.SassCompiler">
			<arg value="${param1}" />
			<arg value="${param2}" />
			<classpath>
				<path refid="testTask.classpath" />
			</classpath>
		</java>
	</target>

	<target depends="build" name="war">
		<copy todir="${deploy}/${war_type}">
			<fileset dir="${build.war}" />
		</copy>
		<copy todir="${deploy}/${war_type}" overwrite="true">
			<fileset dir="${basedir}/environment/${war_type}" />
		</copy>
		<!-- 
		<war warfile="${deploy}/${war_type}.war" webxml="${deploy}/${war_type}/WEB-INF/web.xml">
			<fileset dir="${deploy}/${war_type}" />
		</war> -->
	</target>

	<target depends="compile,copyRuntimeJars" name="build">
		<!--将WebRoot文件，但不包含class目录 -->
		<copy todir="${build.war}">
			<fileset dir="${WebRoot}">
				<exclude name="**/classes/**" />
			</fileset>
		</copy>
		<!-- copy class -->
		<copy todir="${build.war}/WEB-INF/classes">
			<fileset dir="${build.classes}" />
		</copy>
		<copy todir="${build.war}/WEB-INF/lib">
			<fileset dir="${WebRoot}/WEB-INF/lib" />
		</copy>
	</target>

	<target name="compile" description="--> description">
		<mkdir dir="${build.classes}" />
		<copy todir="${build.classes}">
			<fileset dir="${project.home}/src/main/java">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${build.classes}">
				<fileset dir="${project.home}/src/main/resources">
					<exclude name="**/*.java" />
				</fileset>
			</copy>
		<!-- copy the property files to class path-->

		<javac encoding="utf-8" srcdir="${project.home}/src/main/java" nowarn="yes" destdir="${build.classes}" debug="${build.debug}" includeantruntime="false">
			<classpath refid="my.classpath" />
		</javac>


		<!--<javac encoding="utf-8" srcdir="test" destdir="${test.dir}" debug="${build.debug}" includeantruntime="false">
						<compilerarg value="-Xlint:unchecked" />
						<classpath>
							<pathelement path="${build.classes}" />
							<path refid="ivy.libs.test" />
							<path refid="ivy.libs.compile" />
						</classpath>
					</javac>
					<copy todir="${test.dir}">
						<fileset dir="test">
							<include name="**/*.*" />
							<exclude name="**/*.java" />
						</fileset>
					</copy>-->
	</target>
	
	<target name="product_deploy">
		<antcall target="war">
			<param name="war_type" value="product" />
		</antcall>
	</target>
	
	<target name="clean" description="--> clean the project">
		<delete dir="${build.dir}" />
	</target>
</project>
